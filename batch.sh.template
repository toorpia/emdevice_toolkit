#!/bin/bash

WORK_DIR=${HOME}/work # データ取得作業ディレクトリ

# ------------------  default settings ------------------
# 設備ラベル: これを設定するとデータのクラウドストレージでの保存先バケットとして使用される
facility=""

# Cloud Storage のバケット名
DSTURL="gs://tokuyama_bc"

RMS_TH=3.0 # RMS値がこれ未満なら有効データとみなさない。単位%。
CLIP_TH=0.1 # クリッピングデータ点の占める割合がこの値より大きい場合、有効データとみなさない。単位%
UNSTABILITY_CHECK=1 # 0:不安定性チェックしない、1:不安定性チェックする

DURATION=30 # データ取得時間（秒）
EMGETDATA_CONFIG_FILE="${WORK_DIR}/config.yml" # emgetdataの設定ファイル

# ------------------ load settings ------------------
if [ -f "${HOME}/batchrc.sh" ]; then
    source "${HOME}/batchrc.sh"
fi
if [ -f "${WORK_DIR}/batchrc.sh" ]; then
    source "${WORK_DIR}/batchrc.sh"
fi


# ------------------ main ------------------
# 設備ラベルが設定されている場合、これをクラウドストレージ上のバケットとして用いる
if [ "${facility}" != "" ]; then
    DSTURL="${DSTURL}/${facility}"
fi

export PATH=/usr/local/bin:$PATH

echo -n "Start: batchwise data acquistion: " 1>&2
date +%Y%m%d%H%M%S

cd "${WORK_DIR}"

# 出力先ディレクトリ
mkdir -p "${WORK_DIR}/rawdata"

#-----------------------------------------------
# data aquisition
#-----------------------------------------------
cd "${WORK_DIR}/rawdata"
emgetdata -f "${EMGETDATA_CONFIG_FILE}" -t ${DURATION}

#-----------------------------------------------
# Apply gain reduction
#-----------------------------------------------
echo "Applying gain reduction..." 1>&2

# config.ymlの最終更新時刻を取得
config_mtime=$(stat -c %Y ${EMGETDATA_CONFIG_FILE})
echo "Using config file timestamp: $(date -d @${config_mtime})" 1>&2

# config.ymlからセンサーラベルを抽出
sensor_labels=$(grep 'label:' ${EMGETDATA_CONFIG_FILE} | awk -F'"' '{print $2}')

for label in $sensor_labels
do
    # config_mtimeより新しく、サイズが0より大きいWAVファイルを見つける
    wav_files=$(find . -name "*${label}*.wav" -newermt "@${config_mtime}" -size +0c 2>/dev/null)
    
    if [ -n "$wav_files" ]; then
        echo "Processing $label" 1>&2
        
        # gain_reducer.pyを実行
        gain_reducer.py ${EMGETDATA_CONFIG_FILE} "$label" $wav_files
        
        if [ $? -ne 0 ]; then
            echo "Warning: gain_reducer.py failed for $label" 1>&2
        fi
    else
        echo "No new non-empty WAV files found for $label since last config update" 1>&2
    fi
done

# config.ymlのタイムスタンプを現在時刻に更新
touch ${EMGETDATA_CONFIG_FILE}
echo "Updated timestamp of ${EMGETDATA_CONFIG_FILE} to $(date)" 1>&2

echo "Gain reduction complete" 1>&2

#-----------------------------------------------
# check data effectiveness
#-----------------------------------------------
cd "${WORK_DIR}/rawdata"
for out_data in `find . -type f -name '*[0-9].wav'`
do
    if [ "${CLIP_TH}" != "" ]; then
        clipped_th_option="-tc ${CLIP_TH}"
    fi
    if [ "${RMS_TH}" != "" ]; then
        rms_th_option="-tr ${RMS_TH}"
    fi
    if [ "${UNSTABILITY_CHECK}" = "0" ]; then
        disable_unstability_check_option="-d"
    fi
    check_wav_effectiveness ${clipped_th_option} ${rms_th_option} ${disable_unstability_check_option} "${out_data}"
done


#-----------------------------------------------
# upload raw data
#-----------------------------------------------
cd "${WORK_DIR}"
echo "upload..." 1>&2
SRCDIR=rawdata

# ラベル付きのデータを別フォルダーで保存して、空のファイルにする(通信費節約のため)
for i in `find ${SRCDIR} -type f ! -name '*[0-9].wav'`
do
  if [ -s $i ]; then
    to_dir=`echo $i | sed 's/rawdata/rawdata.non-effective/' | xargs dirname`
    if [ ! -d $to_dir ]; then
      mkdir -p $to_dir
    fi
    mv $i $to_dir
    touch $i
  fi
done

# ファイルの処理
for file in ${SRCDIR}/*.wav; do
    # ファイル名から日付部分を抽出（例: 20240805）
    date_string=$(basename "$file" | grep -oP '_\K\d{8}')
    echo "date_string: ${date_string}"

    # 送信先のフォルダーURLを作成
    target_url="${DSTURL}/${date_string}"

    # ファイルを日付フォルダーに移動
    gsutil -m mv $file ${target_url}/
done

#DSTURL=s3://toortest
#aws s3 sync ${SRCDIR} ${DSTURL}


echo -n "complete: " 1>&2
date +%Y%m%d%H%M%S
echo "===============================" 1>&2
